//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RegexHero.ScoreBoardService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScoreBoardVersion", Namespace="http://schemas.datacontract.org/2004/07/ScoreBoardService")]
    [System.SerializableAttribute()]
    public partial class ScoreBoardVersion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameId", Namespace="http://schemas.datacontract.org/2004/07/ScoreBoardService")]
    [System.SerializableAttribute()]
    public partial class GameId : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GameNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VersionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GameName {
            get {
                return this.GameNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GameNameField, value) != true)) {
                    this.GameNameField = value;
                    this.RaisePropertyChanged("GameName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VersionId {
            get {
                return this.VersionIdField;
            }
            set {
                if ((this.VersionIdField.Equals(value) != true)) {
                    this.VersionIdField = value;
                    this.RaisePropertyChanged("VersionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ScoreBoardService.IScoreBoardService1")]
    public interface IScoreBoardService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreBoardService1/ServiceVersion", ReplyAction="http://tempuri.org/IScoreBoardService1/ServiceVersionResponse")]
        RegexHero.ScoreBoardService.ScoreBoardVersion ServiceVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreBoardService1/ServiceVersion", ReplyAction="http://tempuri.org/IScoreBoardService1/ServiceVersionResponse")]
        System.Threading.Tasks.Task<RegexHero.ScoreBoardService.ScoreBoardVersion> ServiceVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreBoardService1/GameId", ReplyAction="http://tempuri.org/IScoreBoardService1/GameIdResponse")]
        RegexHero.ScoreBoardService.GameId GameId(string game, int version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreBoardService1/GameId", ReplyAction="http://tempuri.org/IScoreBoardService1/GameIdResponse")]
        System.Threading.Tasks.Task<RegexHero.ScoreBoardService.GameId> GameIdAsync(string game, int version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreBoardService1/SubmitScore", ReplyAction="http://tempuri.org/IScoreBoardService1/SubmitScoreResponse")]
        void SubmitScore(RegexHero.ScoreBoardService.ScoreBoardVersion version, RegexHero.ScoreBoardService.GameId gameid, string username, int score);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreBoardService1/SubmitScore", ReplyAction="http://tempuri.org/IScoreBoardService1/SubmitScoreResponse")]
        System.Threading.Tasks.Task SubmitScoreAsync(RegexHero.ScoreBoardService.ScoreBoardVersion version, RegexHero.ScoreBoardService.GameId gameid, string username, int score);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreBoardService1/RetrieveScores", ReplyAction="http://tempuri.org/IScoreBoardService1/RetrieveScoresResponse")]
        System.Tuple<string, int>[] RetrieveScores(RegexHero.ScoreBoardService.ScoreBoardVersion verion, RegexHero.ScoreBoardService.GameId gameid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScoreBoardService1/RetrieveScores", ReplyAction="http://tempuri.org/IScoreBoardService1/RetrieveScoresResponse")]
        System.Threading.Tasks.Task<System.Tuple<string, int>[]> RetrieveScoresAsync(RegexHero.ScoreBoardService.ScoreBoardVersion verion, RegexHero.ScoreBoardService.GameId gameid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IScoreBoardService1Channel : RegexHero.ScoreBoardService.IScoreBoardService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ScoreBoardService1Client : System.ServiceModel.ClientBase<RegexHero.ScoreBoardService.IScoreBoardService1>, RegexHero.ScoreBoardService.IScoreBoardService1 {
        
        public ScoreBoardService1Client() {
        }
        
        public ScoreBoardService1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ScoreBoardService1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScoreBoardService1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScoreBoardService1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RegexHero.ScoreBoardService.ScoreBoardVersion ServiceVersion() {
            return base.Channel.ServiceVersion();
        }
        
        public System.Threading.Tasks.Task<RegexHero.ScoreBoardService.ScoreBoardVersion> ServiceVersionAsync() {
            return base.Channel.ServiceVersionAsync();
        }
        
        public RegexHero.ScoreBoardService.GameId GameId(string game, int version) {
            return base.Channel.GameId(game, version);
        }
        
        public System.Threading.Tasks.Task<RegexHero.ScoreBoardService.GameId> GameIdAsync(string game, int version) {
            return base.Channel.GameIdAsync(game, version);
        }
        
        public void SubmitScore(RegexHero.ScoreBoardService.ScoreBoardVersion version, RegexHero.ScoreBoardService.GameId gameid, string username, int score) {
            base.Channel.SubmitScore(version, gameid, username, score);
        }
        
        public System.Threading.Tasks.Task SubmitScoreAsync(RegexHero.ScoreBoardService.ScoreBoardVersion version, RegexHero.ScoreBoardService.GameId gameid, string username, int score) {
            return base.Channel.SubmitScoreAsync(version, gameid, username, score);
        }
        
        public System.Tuple<string, int>[] RetrieveScores(RegexHero.ScoreBoardService.ScoreBoardVersion verion, RegexHero.ScoreBoardService.GameId gameid) {
            return base.Channel.RetrieveScores(verion, gameid);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<string, int>[]> RetrieveScoresAsync(RegexHero.ScoreBoardService.ScoreBoardVersion verion, RegexHero.ScoreBoardService.GameId gameid) {
            return base.Channel.RetrieveScoresAsync(verion, gameid);
        }
    }
}
